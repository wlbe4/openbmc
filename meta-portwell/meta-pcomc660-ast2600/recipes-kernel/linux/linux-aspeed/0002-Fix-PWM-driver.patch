From 5b34af59943380b39c50daea4a270a4f969d2e4a Mon Sep 17 00:00:00 2001
From: Lior Weintraub <liorw@pliops.com>
Date: Thu, 11 May 2023 23:53:42 +0300
Subject: [PATCH] Fix PWM driver. see linux commit
 0829c35dc5346e90f428de61896362b51ab58296: pwm: Drop support for legacy
 drivers

---
 drivers/hwmon/aspeed-g6-pwm-tacho.c | 52 ++++++++++++++++++++++++++---
 1 file changed, 48 insertions(+), 4 deletions(-)

diff --git a/drivers/hwmon/aspeed-g6-pwm-tacho.c b/drivers/hwmon/aspeed-g6-pwm-tacho.c
index f9bfc83b32fe..83818c465017 100644
--- a/drivers/hwmon/aspeed-g6-pwm-tacho.c
+++ b/drivers/hwmon/aspeed-g6-pwm-tacho.c
@@ -1005,13 +1005,16 @@ static void aspeed_pwm_disable(struct pwm_chip *chip, struct pwm_device *pwm)
 }
 
 static int aspeed_pwm_config(struct pwm_chip *chip, struct pwm_device *pwm,
-			     int duty_ns, int period_ns)
+			     int duty_ns, int period_ns, bool enabled)
 {
 	struct aspeed_pwm_tachometer_data *priv = to_aspeed_pwm(chip);
 	struct aspeed_pwm_output_chan *chan = pwm_get_chip_data(pwm);
 	u8 div_h, div_l, period_value, falling_point, rising_point;
 	u32 ctrl_value, duty_value, tick_ns;
 
+	if(!enabled)
+		return 0;
+
 	/*
 	 * We currently avoid using 64bit arithmetic by using the
 	 * fact that anything faster than 1Hz is easily representable
@@ -1056,12 +1059,53 @@ static int aspeed_pwm_config(struct pwm_chip *chip, struct pwm_device *pwm,
 	return 0;
 }
 
+static int aspeed_pwm_set_polarity(struct pwm_chip *chip, struct pwm_device *pwm,
+				enum pwm_polarity polarity)
+{
+//	struct tpu_pwm_device *tpd = pwm_get_chip_data(pwm);
+//	tpd->polarity = polarity;
+	return 0;
+}
+
+static int aspeed_pwm_apply(struct pwm_chip *chip, struct pwm_device *pwm,
+			 const struct pwm_state *state)
+{
+	int err;
+	bool enabled = pwm->state.enabled;
+
+	if (state->polarity != pwm->state.polarity) {
+		if (enabled) {
+			aspeed_pwm_disable(chip, pwm);
+			enabled = false;
+		}
+
+		err = aspeed_pwm_set_polarity(chip, pwm, state->polarity);
+		if (err)
+			return err;
+	}
+
+	if (!state->enabled) {
+		if (enabled)
+			aspeed_pwm_disable(chip, pwm);
+
+		return 0;
+	}
+
+	err = aspeed_pwm_config(pwm->chip, pwm,
+			     state->duty_cycle, state->period, enabled);
+	if (err)
+		return err;
+
+	if (!enabled)
+		err = aspeed_pwm_enable(chip, pwm);
+
+	return err;
+}
+
 static const struct pwm_ops aspeed_pwm_ops = {
 	.request	= aspeed_pwm_request,
 	.free		= aspeed_pwm_free,
-	.enable		= aspeed_pwm_enable,
-	.disable	= aspeed_pwm_disable,
-	.config		= aspeed_pwm_config,
+    .apply      = aspeed_pwm_apply,
 	.owner		= THIS_MODULE,
 };
 
-- 
2.17.1

